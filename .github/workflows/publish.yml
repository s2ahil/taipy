name: Publish on Pypi

on:
  workflow_dispatch:
    inputs:
      version:
        description: "The tag of the package to publish on Pypi (ex: 1.0.0, 1.0.0.dev0)"
        required: true

jobs:
  test-package:
    timeout-minutes: 20
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Extract Github Tag Version
        id: vars
        run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      - name: Download assets from github release tag
        run: |
          gh release download ${{ github.event.inputs.version }} --dir dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify if all releases exist
        run: |
          python tools/release/check_releases.py

  publish-to-pypi:
    needs: [test-package]
    timeout-minutes: 20
    environment: publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download assets from tag
        run: |
          gh release download ${{ github.event.inputs.version }} --dir dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

  test-published-package:
    needs: [publish-to-pypi]
    timeout-minutes: 30
    strategy:
      matrix:
        python-versions: ['3.8','3.9','3.10', '3.11', '3.12']
        os: [ubuntu-latest,windows-latest,macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-versions }}

      - name: Prepare tests on unix
        if: matrix.os != 'windows-latest'
        run: |
          rm -rf taipy

      - name: Prepare tests on windows
        if: matrix.os == 'windows-latest'
        run: |
          rmdir -Recurse -Force taipy

      - name: Install and test package
        run: |
          pip install --upgrade pip
          pip install --no-cache-dir ${{ github.event.repository.name }}==${{ github.event.inputs.version }}
          python tools/validate_taipy_install.py
